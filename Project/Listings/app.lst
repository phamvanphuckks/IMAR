C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE APP
OBJECT MODULE PLACED IN .\Objects\app.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\app.c OPTIMIZE(7,SPEED) BROWSE INCDIR(.\inc;.\Library\Device\Include
                    -;.\Library\StdDriver\inc;..\Project) DEBUG OBJECTEXTEND PRINT(.\Listings\app.lst) TABS(2) OBJECT(.\Objects\app.obj)

line level    source

   1          #include "app.h"
   2          
   3          /********************************************//**
   4           *   User variables
   5           ***********************************************/
   6          static unsigned char xdata t_hour_begin = 0, t_minute_begin = 0, t_second_begin = 0;
   7          static unsigned char xdata t_hour_end = 0, t_minute_end = 0, t_second_end = 0;
   8          
   9          // rtc time and date
  10          static RTC_time_t xdata rtc_time;
  11          static RTC_date_t xdata rtc_date;
  12          
  13          // ds1307
  14          volatile uint16_t tick = 0;
  15          volatile unsigned char xdata request_ds1307_interval = LOW;
  16          
  17          // button
  18          static STATE_t xdata state = NORMAL;
  19          
  20          // timer
  21          static unsigned char xdata timer_flag         = FLOATNG;
  22          static unsigned char xdata timer_en_flag      = LOW;
  23          static unsigned char xdata timer_mode_flag    = FLOATNG;
  24          
  25          // uart
  26          char xdata payLoad[PAYLOAD_LEN];
  27          unsigned char xdata index_data = 0;
  28          /********************************************//**
  29           *   User functions
  30           ***********************************************/
  31          void app_init(void)
  32          {
  33   1        MODIFY_HIRC(HIRC_16);
  34   1        
  35   1        // Initialize GPIO
  36   1        GPIO_init();
  37   1        
  38   1        // Initialize UART
  39   1        uart_init();
  40   1        
  41   1        // Initialize delay - timer0
  42   1        Delay_init();
  43   1        
  44   1        // Initialize DS1307
  45   1        DS1307_Init();
  46   1        
  47   1        // Load flash
  48   1        check_btn_last_state();
  49   1        check_timer();
  50   1        
  51   1        // TIMER1 Init 
  52   1        TIM1_init();
  53   1      }
  54          
C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 2   

  55          void app_process_action(void)
  56          {
  57   1        check_button();
  58   1      
  59   1        check_uart();
  60   1      
  61   1        check_ds1307();
  62   1      }
  63          
  64          void uart_init(void)
  65          {
  66   1        UART_Open(FREQ_SYS, UART0_Timer3, 9600);
  67   1        ENABLE_UART0_PRINTF;
  68   1        ENABLE_UART0_INTERRUPT;   /* Enable UART0 interrupt */
  69   1        ENABLE_GLOBAL_INTERRUPT;  /* Global interrupt enable */
  70   1      
  71   1        uartFresh();
  72   1      }
  73          
  74          void check_button(void)
  75          {
  76   1        uint16_t timeout = 0, last_state;
  77   1        
  78   1        if (timer_flag == FLOATNG)
  79   1        {
  80   2          if (state == NORMAL)
  81   2          {
  82   3            if(BTN2_PAS == HIGH)
  83   3            {
  84   4              LED_RELAY2 = HIGH;
  85   4              Delay_ms(10);
  86   4              while (BTN2_PAS == HIGH)
  87   4              {
  88   5                if(timeout == 2000)
  89   5                {
  90   6                  LED_RELAY1 = LOW;         
  91   6                  LED_RELAY2 = HIGH;
  92   6                  state = PASS_HOLD_3S;
  93   6                  
  94   6                  last_state = Read_APROM_BYTE(STATE_MODE);
  95   6                  if(last_state != PASS_HOLD_3S)
  96   6                  {
  97   7                    Write_DATAFLASH_BYTE(STATE_MODE, state);
  98   7                  }
  99   6                }
 100   5                Delay_ms(1);
 101   5                timeout++;
 102   5              }
 103   4            }
 104   3            else 
 105   3            {
 106   4              LED_RELAY2 = (BTN1_COS == HIGH)? HIGH : LOW;
 107   4            }
 108   3          }
 109   2          
 110   2          if (state == PASS_HOLD_3S)
 111   2          {
 112   3            if(BTN2_PAS == HIGH)
 113   3            {
 114   4              LED_RELAY1 = HIGH;
 115   4              Delay_ms(10);
 116   4              
C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 3   

 117   4              timeout = 0;
 118   4              while (BTN2_PAS == HIGH)
 119   4              {
 120   5                if(timeout == 2000)
 121   5                {
 122   6                  LED_RELAY2 = LOW;
 123   6      
 124   6                  LED_RELAY1 = HIGH;
 125   6                  Delay_ms(100);
 126   6                  LED_RELAY1 = LOW;
 127   6                  Delay_ms(100);
 128   6                  LED_RELAY1 = HIGH;
 129   6      
 130   6                  state = NORMAL;
 131   6      
 132   6                  last_state = Read_APROM_BYTE(STATE_MODE);
 133   6                  if(last_state != NORMAL)
 134   6                  {
 135   7                    Write_DATAFLASH_BYTE(STATE_MODE, state);
 136   7                  }
 137   6                }
 138   5                Delay_ms(1);
 139   5                timeout++;
 140   5              }
 141   4            }
 142   3            else
 143   3            {
 144   4              LED_RELAY1 = 0;
 145   4            }
 146   3          }
 147   2        }
 148   1      }
 149          
 150          void check_btn_last_state(void)
 151          {
 152   1        uint8_t tmp;
 153   1      
 154   1        tmp = Read_APROM_BYTE(STATE_MODE);
 155   1        if(tmp != 0xFF)
 156   1        {
 157   2          state = tmp;
 158   2        }
 159   1      
 160   1        if(state == NORMAL)
 161   1        {
 162   2          LED_RELAY1 = 1;
 163   2          LED_RELAY2 = 0;   
 164   2        }
 165   1        else if (state == PASS_HOLD_3S)
 166   1        {
 167   2          LED_RELAY1 = 0;
 168   2          LED_RELAY2 = 1;   
 169   2        }
 170   1        else 
 171   1        {
 172   2          LED_RELAY1 = 1;
 173   2          LED_RELAY2 = 0;
 174   2        }
 175   1      }
 176          
 177          void check_timer(void)
 178          {
C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 4   

 179   1        uint8_t tmp;
 180   1      
 181   1        tmp = Read_APROM_BYTE(DS1307_HOURS_START_ADDRESS);
 182   1        if(tmp != 0xff)
 183   1        {
 184   2          t_hour_begin = tmp;
 185   2        }
 186   1        
 187   1        tmp = Read_APROM_BYTE(DS1307_MINUTE_START_ADDRESS);
 188   1        if(tmp != 0xff)
 189   1        {
 190   2          t_minute_begin = tmp;
 191   2        }
 192   1        
 193   1        tmp = Read_APROM_BYTE(DS1307_SECOND_START_ADDRESS);
 194   1        if(tmp != 0xff)
 195   1        {
 196   2          t_second_begin = tmp;
 197   2        }
 198   1        
 199   1        tmp = Read_APROM_BYTE(DS1307_HOURS_STOP_ADDRESS);
 200   1        if(tmp != 0xff)
 201   1        {
 202   2          t_hour_end = tmp;
 203   2        }
 204   1        
 205   1        tmp = Read_APROM_BYTE(DS1307_MINUTE_STOP_ADDRESS);
 206   1        if(tmp != 0xff)
 207   1        {
 208   2          t_minute_end = tmp;
 209   2        }
 210   1        
 211   1        tmp = Read_APROM_BYTE(DS1307_SECOND_STOP_ADDRESS);
 212   1        if(tmp != 0xff)
 213   1        {
 214   2          t_second_end = tmp;
 215   2        }
 216   1        
 217   1        tmp = Read_APROM_BYTE(DS1307_TIMER_MODE_FLAG);  
 218   1        if(tmp != 0xff)
 219   1        {
 220   2          timer_mode_flag = tmp;
 221   2        }
 222   1        
 223   1        tmp = Read_APROM_BYTE(DS1307_TIMER_FLAG);
 224   1        if(tmp != 0xff)
 225   1        {
 226   2          timer_flag = tmp;
 227   2        }
 228   1        
 229   1        tmp = Read_APROM_BYTE(DS1307_TIMER_EN_FLAG);
 230   1        if(tmp != 0xff)
 231   1        {
 232   2          timer_en_flag = tmp;
 233   2        }
 234   1        
 235   1        if(timer_flag == HIGH)
 236   1        {
 237   2          LED_RELAY1 = HIGH;
 238   2          LED_RELAY2 = LOW;
 239   2        }
 240   1        else if(timer_flag == LOW)
C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 5   

 241   1        {
 242   2          LED_RELAY1 = LOW;
 243   2          LED_RELAY2 = LOW;
 244   2        }
 245   1        else 
 246   1        {
 247   2          
 248   2        }
 249   1      }
 250          
 251          void check_uart(void)
 252          {
 253   1        char xdata header[3], hours[3], minutes[3], seconds[3];
 254   1        
 255   1        if (IsData() == '#')
 256   1        {
 257   2          while(IsAvailable()) // read from message header
 258   2          {
 259   3            if (uartReadByte() == '$') 
 260   3            {
 261   4              payLoad[index_data++] = '$';
 262   4              break;
 263   4            }
 264   3          }
 265   2      
 266   2          while(IsAvailable()) // read the message body
 267   2          {
 268   3            payLoad[index_data++] = uartReadByte();
 269   3            if(payLoad[index_data - 1]== '#') break;
 270   3          }
 271   2          payLoad[index_data] = '\0';
 272   2          // clear buffer
 273   2          uartResetNByte(PAYLOAD_LEN);
 274   2          
 275   2          // parser data
 276   2          parser_data(header, hours, minutes, seconds, payLoad);
 277   2          
 278   2          if(!strcmp(header, "$C"))
 279   2          {
 280   3            rtc_time.hours       = atoi(hours);
 281   3            rtc_time.minutes     = atoi(minutes);
 282   3            rtc_time.seconds     = atoi(seconds);
 283   3            DS1307_Set_Current_Time(&rtc_time);
 284   3        
 285   3            printf("OK\r\n");
 286   3          }
 287   2          else if (!strcmp(header, "$S")) // time A
 288   2          {
 289   3            if (timer_en_flag == LOW) // if timer is DISABLE
 290   3            {
 291   4              t_hour_begin     = atoi(hours);
 292   4              t_minute_begin   = atoi(minutes);
 293   4              t_second_begin   = atoi(seconds);
 294   4          
 295   4              Write_DATAFLASH_BYTE(DS1307_HOURS_START_ADDRESS, t_hour_begin);
 296   4              Write_DATAFLASH_BYTE(DS1307_MINUTE_START_ADDRESS, t_minute_begin);
 297   4              Write_DATAFLASH_BYTE(DS1307_SECOND_START_ADDRESS, t_second_begin);  
 298   4      
 299   4              printf("OK\r\n");   
 300   4            }
 301   3            else
 302   3            {
C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 6   

 303   4              printf("NOT OK => DURING TIMER\r\n");   
 304   4            }
 305   3          }
 306   2          else if (!strcmp(header, "$E")) // time B
 307   2          {
 308   3            if (timer_en_flag == LOW) // if timer is DISABLE
 309   3            {
 310   4              t_hour_end     = atoi(hours);
 311   4              t_minute_end   = atoi(minutes);
 312   4              t_second_end   = atoi(seconds);
 313   4          
 314   4              Write_DATAFLASH_BYTE(DS1307_HOURS_STOP_ADDRESS, t_hour_end);
 315   4              Write_DATAFLASH_BYTE(DS1307_MINUTE_STOP_ADDRESS, t_minute_end);
 316   4              Write_DATAFLASH_BYTE(DS1307_SECOND_STOP_ADDRESS, t_second_end);     
 317   4      
 318   4              printf("OK\r\n");
 319   4            }
 320   3            else
 321   3            {
 322   4              printf("NOT OK => DURING TIMER\r\n");
 323   4            }
 324   3          }
 325   2          else if (!strcmp(header, "$A")) // enable/disable timer
 326   2          {
 327   3            uint8_t val_1, val_2, val_3;
 328   3            
 329   3            val_1   = atoi(hours);
 330   3            val_2   = atoi(minutes);
 331   3            val_3   = atoi(seconds);
 332   3            
 333   3            if((val_1 == 0) && (val_2 == 0) && (val_3 == 0))
 334   3            {
 335   4              
 336   4              timer_en_flag = LOW;
 337   4              timer_flag = FLOATNG;
 338   4              
 339   4              Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 340   4              Write_DATAFLASH_BYTE(DS1307_TIMER_EN_FLAG, timer_en_flag);
 341   4              
 342   4              check_btn_last_state();
 343   4              
 344   4              printf("DISABLE\r\n");
 345   4            }
 346   3            else if((val_1 == 11) && (val_2 == 11) && (val_3 == 11))
 347   3            {
 348   4              timer_en_flag = HIGH;
 349   4              timer_flag = LOW;
 350   4              
 351   4              Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 352   4              Write_DATAFLASH_BYTE(DS1307_TIMER_EN_FLAG, timer_en_flag);
 353   4              
 354   4              printf("ENABLE\r\n");
 355   4            }
 356   3          }
 357   2          else
 358   2          {
 359   3            // do something here
 360   3          }
 361   2          
 362   2          // clear buffer
 363   2          index_data = 0;
 364   2          memset(payLoad, 0, PAYLOAD_LEN);
C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 7   

 365   2        }
 366   1      }
 367          
 368          void parser_data(char *header, char *hours, char *minutes, char *seconds, char *payLoad)
 369          {
 370   1        char *p_rx, *p_header, *p_hours, *p_minutes, *p_seconds;
 371   1        
 372   1        // parser data => $C,23,17,05# - Set current time || $S,23,17,05# - Alarm on || $E,23,17,05# - Alarm off
 373   1        if((header != NULL) && (hours != NULL) && (minutes != NULL) && (seconds != NULL) && (payLoad != NULL))
 374   1        {
 375   2          p_rx = payLoad;
 376   2          p_header = p_rx;
 377   2          p_rx = strchr(p_header, ',');
 378   2          if(p_rx != NULL)
 379   2          {
 380   3            *p_rx = 0;
 381   3            strcpy(header, p_header);
 382   3          }   
 383   2          
 384   2          p_hours = p_rx+1;
 385   2          p_rx = strchr(p_hours, ',');
 386   2          if(p_rx != NULL)
 387   2          {
 388   3              *p_rx = 0;
 389   3              strcpy(hours, p_hours);
 390   3          }
 391   2          
 392   2          p_minutes = p_rx+1;
 393   2          p_rx = strchr(p_minutes, ',');
 394   2          if(p_rx != NULL)
 395   2          {
 396   3              *p_rx = 0;
 397   3              strcpy(minutes, p_minutes);
 398   3          }
 399   2          
 400   2          p_seconds = p_rx+1;
 401   2          p_rx = strchr(p_seconds, '#');
 402   2          if(p_rx != NULL)
 403   2          {
 404   3              *p_rx = 0;
 405   3              strcpy(seconds, p_seconds);
 406   3          }
 407   2        }
 408   1      }
 409          
 410          void check_ds1307(void)
 411          {
 412   1        if(request_ds1307_interval == HIGH) // ds1307 get interval data
 413   1        {
 414   2          if (timer_en_flag == HIGH) // if timer is ENABLE
 415   2          {
 416   3            // get current time
 417   3            DS1307_Get_Current_Time(&rtc_time);
 418   3      
 419   3            // get current date
 420   3            DS1307_Get_Current_Date(&rtc_date);
 421   3      
 422   3            if(timer_flag == LOW) // Phase 1 during A - B
 423   3            {
 424   4              if(TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) == TIME2SECOND(t_hour_end, t_minute_end, 
             -t_second_end))
 425   4              {
C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 8   

 426   5                timer_flag = FLOATNG;
 427   5                Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 428   5                
 429   5                printf("SET TIMER ERROR\r\n");
 430   5              }
 431   4              
 432   4              // relay 1 on and relay 2 off => 6.am - 17.pm
 433   4              if(TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) < TIME2SECOND(t_hour_end, t_minute_end, t
             -_second_end))
 434   4              {
 435   5      #if LOG_ENABLE
                        printf("1\r\n");
              #endif
 438   5                if((TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) > TIME2SECOND(t_hour_begin, t_min
             -ute_begin, t_second_begin)) &&
 439   5                   (TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) < TIME2SECOND(t_hour_end, t_minute
             -_end, t_second_end)))
 440   5                {
 441   6                  LED_RELAY1 = HIGH;
 442   6                  LED_RELAY2 = LOW;
 443   6                  
 444   6                  timer_flag = FLOATNG;
 445   6                  timer_mode_flag = LINE_TIME;
 446   6                  
 447   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 448   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 449   6                  
 450   6                  check_btn_last_state();
 451   6      #if LOG_ENABLE
                          printf("Jump into active mode 1\r\n");
              #endif
 454   6                }
 455   5              }
 456   4              
 457   4              // relay 1 on and relay 2 off => 19.pm - 6.am
 458   4              if(TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) > TIME2SECOND(t_hour_end, t_minute_end, t
             -_second_end))
 459   4              {
 460   5      #if LOG_ENABLE
                        printf("2\r\n");
              #endif
 463   5                if(TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) > TIME2SECOND(t_hour_begin, t_minu
             -te_begin, t_second_begin))
 464   5                {
 465   6                  LED_RELAY1 = HIGH;
 466   6                  LED_RELAY2 = LOW;
 467   6                  
 468   6                  timer_flag = FLOATNG;
 469   6                  timer_mode_flag = WRAP_TIME;
 470   6                  
 471   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 472   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 473   6            
 474   6                  check_btn_last_state();
 475   6      #if LOG_ENABLE
                          printf("Jump into active mode 2\r\n");
              #endif
 478   6                }
 479   5              }
 480   4            }
 481   3            
 482   3            if(timer_flag == FLOATNG) // Phase 2 during A - B
C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 9   

 483   3            {
 484   4              // relay 1 and relay 2 off => 6.am - 17.pm
 485   4              if((TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) < TIME2SECOND(t_hour_end, t_minute_end, 
             -t_second_end)) &&
 486   4                 (timer_mode_flag == LINE_TIME))
 487   4              {
 488   5      #if LOG_ENABLE
                        printf("12\r\n");
              #endif
 491   5                if(TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) < TIME2SECOND(t_hour_begin, t_min
             -ute_begin, t_second_begin))
 492   5                {
 493   6                  LED_RELAY1 = LOW;
 494   6                  LED_RELAY2 = LOW;
 495   6                  
 496   6                  timer_flag = LOW;
 497   6                  timer_mode_flag = FLOATNG;
 498   6                  
 499   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 500   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 501   6      #if LOG_ENABLE            
                          printf("Jump out active mode 1 < \r\n");
              #endif
 504   6                }
 505   5      
 506   5                if(TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) > TIME2SECOND(t_hour_end, t_minute
             -_end, t_second_end))
 507   5                {
 508   6                  LED_RELAY1 = LOW;
 509   6                  LED_RELAY2 = LOW;
 510   6                  
 511   6                  timer_flag = LOW;
 512   6                  timer_mode_flag = FLOATNG;
 513   6      
 514   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 515   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 516   6      #if LOG_ENABLE            
                          printf("Jump out active mode 1 > \r\n");
              #endif
 519   6                }
 520   5              }
 521   4              
 522   4              // relay 1 and relay 2 off => 19.pm - 6.am
 523   4              if((TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) > TIME2SECOND(t_hour_end, t_minute_end, 
             -t_second_end)) &&
 524   4                 (timer_mode_flag == WRAP_TIME))
 525   4              {
 526   5      #if LOG_ENABLE  
                        printf("21\r\n"); 
              #endif
 529   5                if((TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) < TIME2SECOND(t_hour_begin, t_min
             -ute_begin, t_second_begin)) && // 6.am -> 19.pm
 530   5                   (TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) > TIME2SECOND(t_hour_end, t_minute
             -_end, t_second_end)))
 531   5                {
 532   6                  LED_RELAY1 = LOW;
 533   6                  LED_RELAY2 = LOW;
 534   6                  
 535   6                  timer_flag = LOW;
 536   6                  timer_mode_flag = FLOATNG;
 537   6                  
 538   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
C51 COMPILER V9.60.0.0   APP                                                               03/19/2023 14:37:22 PAGE 10  

 539   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 540   6      #if LOG_ENABLE              
                          printf("Jump out active mode 2\r\n");
              #endif
 543   6                }         
 544   5              }
 545   4            }
 546   3          }
 547   2          
 548   2          request_ds1307_interval = LOW;
 549   2        }
 550   1      }
 551          
 552          /*********************************************************************************************************
             -***
 553               Timer1 interrupt subroutine
 554          **********************************************************************************************************
             -**/
 555          void Timer1_ISR (void) interrupt 3
 556          {
 557   1        _push_(SFRS);
 558   1      
 559   1        tick++;
 560   1        if (tick >= 1000) // for 1s
 561   1        {
 562   2          request_ds1307_interval = HIGH;
 563   2          tick = 0;
 564   2        }
 565   1        
 566   1        TH1 = TH1_INIT;
 567   1        TL1 = TL1_INIT;
 568   1        TF0 = 0;
 569   1        
 570   1        _pop_(SFRS);
 571   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4120    ----
   CONSTANT SIZE    =     79    ----
   XDATA SIZE       =     33      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      37
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
