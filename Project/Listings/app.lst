C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE APP
OBJECT MODULE PLACED IN .\Objects\app.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\app.c OPTIMIZE(7,SPEED) BROWSE INCDIR(.\inc;.\Library\Device\Include
                    -;.\Library\StdDriver\inc;..\Project) DEBUG OBJECTEXTEND PRINT(.\Listings\app.lst) TABS(2) OBJECT(.\Objects\app.obj)

line level    source

   1          #include "app.h"
   2          
   3          /********************************************//**
   4           *   User variables
   5           ***********************************************/
   6          static unsigned char xdata t_hour_begin = 0, t_minute_begin = 0, t_second_begin = 0;
   7          static unsigned char xdata t_hour_end = 0, t_minute_end = 0, t_second_end = 0;
   8          
   9          // rtc time and date
  10          static RTC_time_t xdata rtc_time;
  11          static RTC_date_t xdata rtc_date;
  12          
  13          // ds1307
  14          volatile uint16_t tick = 0;
  15          volatile unsigned char xdata request_ds1307_interval = LOW;
  16          
  17          // button
  18          static STATE_t xdata state = NORMAL;
  19          
  20          // timer
  21          static unsigned char xdata timer_flag         = FLOATNG;
  22          static unsigned char xdata timer_en_flag      = LOW;
  23          static unsigned char xdata timer_mode_flag    = FLOATNG;
  24          
  25          // uart
  26          char xdata payLoad[PAYLOAD_LEN];
  27          unsigned char xdata index_data = 0;
  28          /********************************************//**
  29           *   User functions
  30           ***********************************************/
  31          void app_init(void)
  32          {
  33   1        MODIFY_HIRC(HIRC_16);
  34   1        
  35   1        // Initialize GPIO
  36   1        GPIO_init();
  37   1        
  38   1        // Initialize UART
  39   1        uart_init();
  40   1        
  41   1        // Initialize delay - timer0
  42   1        Delay_init();
  43   1        
  44   1        // Initialize DS1307
  45   1        DS1307_Init();
  46   1        
  47   1        rtc_time.hours   = 0;
  48   1        rtc_time.minutes = 0;
  49   1        rtc_time.seconds = 0;
  50   1        DS1307_Set_Current_Time(&rtc_time); 
  51   1        Delay_ms(100);
  52   1        DS1307_Get_Current_Time(&rtc_time);
  53   1        
  54   1        // Load flash
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 2   

  55   1        check_btn_last_state();
  56   1        check_timer();
  57   1        
  58   1        // TIMER1 Init 
  59   1        TIM1_init();
  60   1      }
  61          
  62          void app_process_action(void)
  63          {
  64   1        check_button();
  65   1      
  66   1        check_uart();
  67   1      
  68   1        check_ds1307();
  69   1      }
  70          
  71          void uart_init(void)
  72          {
  73   1        UART_Open(FREQ_SYS, UART0_Timer3, 9600);
  74   1        ENABLE_UART0_PRINTF;
  75   1        ENABLE_UART0_INTERRUPT;   /* Enable UART0 interrupt */
  76   1        ENABLE_GLOBAL_INTERRUPT;  /* Global interrupt enable */
  77   1      
  78   1        uartFresh();
  79   1      }
  80          
  81          void check_button(void)
  82          {
  83   1        uint16_t timeout = 0, last_state;
  84   1        
  85   1        if (state == NORMAL)
  86   1        {
  87   2          if(BTN2_PAS == HIGH)
  88   2          {
  89   3            LED_RELAY2 = HIGH;
  90   3            Delay_ms(10);
  91   3            while (BTN2_PAS == HIGH)
  92   3            {
  93   4              if(timeout == 2000)
  94   4              {
  95   5                LED_RELAY1 = LOW;         
  96   5                LED_RELAY2 = HIGH;
  97   5                state = PASS_HOLD_3S;
  98   5                
  99   5                last_state = Read_APROM_BYTE(STATE_MODE);
 100   5                if(last_state != PASS_HOLD_3S)
 101   5                {
 102   6                  Write_DATAFLASH_BYTE(STATE_MODE, state);
 103   6                }
 104   5              }
 105   4              Delay_ms(1);
 106   4              timeout++;
 107   4            }
 108   3          }
 109   2          else 
 110   2          {
 111   3            LED_RELAY2 = (BTN1_COS == HIGH)? HIGH : LOW;
 112   3          }
 113   2        }
 114   1        
 115   1        if (state == PASS_HOLD_3S)
 116   1        {
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 3   

 117   2          if(BTN2_PAS == HIGH)
 118   2          {
 119   3            LED_RELAY1 = HIGH;
 120   3            Delay_ms(10);
 121   3            
 122   3            timeout = 0;
 123   3            while (BTN2_PAS == HIGH)
 124   3            {
 125   4              if(timeout == 2000)
 126   4              {
 127   5                LED_RELAY2 = LOW;
 128   5      
 129   5                LED_RELAY1 = HIGH;
 130   5                Delay_ms(100);
 131   5                LED_RELAY1 = LOW;
 132   5                Delay_ms(100);
 133   5                LED_RELAY1 = HIGH;
 134   5      
 135   5                state = NORMAL;
 136   5      
 137   5                last_state = Read_APROM_BYTE(STATE_MODE);
 138   5                if(last_state != NORMAL)
 139   5                {
 140   6                  Write_DATAFLASH_BYTE(STATE_MODE, state);
 141   6                }
 142   5              }
 143   4              Delay_ms(1);
 144   4              timeout++;
 145   4            }
 146   3          }
 147   2          else
 148   2          {
 149   3            LED_RELAY1 = 0;
 150   3          }
 151   2        }
 152   1      }
 153          
 154          void check_btn_last_state(void)
 155          {
 156   1        uint8_t tmp;
 157   1      
 158   1        tmp = Read_APROM_BYTE(STATE_MODE);
 159   1        if(tmp != 0xFF)
 160   1        {
 161   2          state = tmp;
 162   2        }
 163   1      
 164   1        if(state == NORMAL)
 165   1        {
 166   2          LED_RELAY1 = 1;
 167   2          LED_RELAY2 = 0;   
 168   2        }
 169   1        else if (state == PASS_HOLD_3S)
 170   1        {
 171   2          LED_RELAY1 = 0;
 172   2          LED_RELAY2 = 1;   
 173   2        }
 174   1        else 
 175   1        {
 176   2          LED_RELAY1 = 1;
 177   2          LED_RELAY2 = 0;
 178   2        }
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 4   

 179   1      }
 180          
 181          void check_timer(void)
 182          {
 183   1        uint8_t tmp;
 184   1      
 185   1        tmp = Read_APROM_BYTE(DS1307_HOURS_START_ADDRESS);
 186   1        if(tmp != 0xff)
 187   1        {
 188   2          t_hour_begin = tmp;
 189   2        }
 190   1        
 191   1        tmp = Read_APROM_BYTE(DS1307_MINUTE_START_ADDRESS);
 192   1        if(tmp != 0xff)
 193   1        {
 194   2          t_minute_begin = tmp;
 195   2        }
 196   1        
 197   1        tmp = Read_APROM_BYTE(DS1307_SECOND_START_ADDRESS);
 198   1        if(tmp != 0xff)
 199   1        {
 200   2          t_second_begin = tmp;
 201   2        }
 202   1        
 203   1        tmp = Read_APROM_BYTE(DS1307_HOURS_STOP_ADDRESS);
 204   1        if(tmp != 0xff)
 205   1        {
 206   2          t_hour_end = tmp;
 207   2        }
 208   1        
 209   1        tmp = Read_APROM_BYTE(DS1307_MINUTE_STOP_ADDRESS);
 210   1        if(tmp != 0xff)
 211   1        {
 212   2          t_minute_end = tmp;
 213   2        }
 214   1        
 215   1        tmp = Read_APROM_BYTE(DS1307_SECOND_STOP_ADDRESS);
 216   1        if(tmp != 0xff)
 217   1        {
 218   2          t_second_end = tmp;
 219   2        }
 220   1        
 221   1        tmp = Read_APROM_BYTE(DS1307_TIMER_MODE_FLAG);  
 222   1        if(tmp != 0xff)
 223   1        {
 224   2          timer_mode_flag = tmp;
 225   2        }
 226   1        
 227   1        tmp = Read_APROM_BYTE(DS1307_TIMER_FLAG);
 228   1        if(tmp != 0xff)
 229   1        {
 230   2          timer_flag = tmp;
 231   2        }
 232   1        
 233   1        tmp = Read_APROM_BYTE(DS1307_TIMER_EN_FLAG);
 234   1        if(tmp != 0xff)
 235   1        {
 236   2          timer_en_flag = tmp;
 237   2        }
 238   1        
 239   1        if(timer_en_flag == HIGH)
 240   1        {
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 5   

 241   2          if((timer_mode_flag == WRAP_TIME) || (timer_mode_flag == LINE_TIME)) // during A-B
 242   2          {
 243   3            LED_RELAY1 = HIGH;
 244   3            LED_RELAY2 = LOW;
 245   3            
 246   3            Write_DATAFLASH_BYTE(STATE_MODE, NORMAL);
 247   3            state = NORMAL;
 248   3          }
 249   2          else if(timer_flag == LOW) // out of range A-B
 250   2          {
 251   3            LED_RELAY1 = LOW;
 252   3            LED_RELAY2 = LOW;
 253   3            
 254   3            Write_DATAFLASH_BYTE(STATE_MODE, NORMAL);
 255   3            state = NORMAL;
 256   3          }
 257   2        }
 258   1      }
 259          
 260          void check_uart(void)
 261          {
 262   1        char xdata header[3], hours[3], minutes[3], seconds[3];
 263   1        uint8_t tmp = 0;
 264   1        
 265   1        if (IsData() == '#')
 266   1        {
 267   2          while(IsAvailable()) // read from message header
 268   2          {
 269   3            if (uartReadByte() == '$') 
 270   3            {
 271   4              payLoad[index_data++] = '$';
 272   4              break;
 273   4            }
 274   3          }
 275   2      
 276   2          while(IsAvailable()) // read the message body
 277   2          {
 278   3            payLoad[index_data++] = uartReadByte();
 279   3            if(payLoad[index_data - 1]== '#') break;
 280   3          }
 281   2          payLoad[index_data] = '\0';
 282   2          // clear buffer
 283   2          uartResetNByte(PAYLOAD_LEN);
 284   2          
 285   2          // parser data
 286   2          parser_data(header, hours, minutes, seconds, payLoad);
 287   2      
 288   2          if(!strcmp(header, "$C"))
 289   2          {
 290   3            rtc_time.hours       = atoi(hours);
 291   3            rtc_time.minutes     = atoi(minutes);
 292   3            rtc_time.seconds     = atoi(seconds);
 293   3            DS1307_Set_Current_Time(&rtc_time);
 294   3            
 295   3            printf("OK\r\n");
 296   3          }
 297   2          else if (!strcmp(header, "$S")) // time A
 298   2          {
 299   3            if (timer_en_flag == LOW) // if timer is DISABLE
 300   3            {
 301   4              t_hour_begin     = atoi(hours);
 302   4              t_minute_begin   = atoi(minutes);
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 6   

 303   4              t_second_begin   = atoi(seconds);
 304   4          
 305   4              Write_DATAFLASH_BYTE(DS1307_HOURS_START_ADDRESS, t_hour_begin);
 306   4              Write_DATAFLASH_BYTE(DS1307_MINUTE_START_ADDRESS, t_minute_begin);
 307   4              Write_DATAFLASH_BYTE(DS1307_SECOND_START_ADDRESS, t_second_begin);  
 308   4      
 309   4              printf("OK\r\n");   
 310   4            }
 311   3            else
 312   3            {
 313   4              printf("NOT OK => DURING TIMER\r\n");   
 314   4            }
 315   3          }
 316   2          else if (!strcmp(header, "$E")) // time B
 317   2          {
 318   3            if (timer_en_flag == LOW) // if timer is DISABLE
 319   3            {
 320   4              t_hour_end     = atoi(hours);
 321   4              t_minute_end   = atoi(minutes);
 322   4              t_second_end   = atoi(seconds);
 323   4          
 324   4              Write_DATAFLASH_BYTE(DS1307_HOURS_STOP_ADDRESS, t_hour_end);
 325   4              Write_DATAFLASH_BYTE(DS1307_MINUTE_STOP_ADDRESS, t_minute_end);
 326   4              Write_DATAFLASH_BYTE(DS1307_SECOND_STOP_ADDRESS, t_second_end);     
 327   4      
 328   4              printf("OK\r\n");
 329   4            }
 330   3            else
 331   3            {
 332   4              printf("NOT OK => DURING TIMER\r\n");
 333   4            }
 334   3          }
 335   2          else if (!strcmp(header, "$A")) // enable/disable timer
 336   2          {
 337   3            uint8_t val_1, val_2, val_3;
 338   3            
 339   3            val_1   = atoi(hours);
 340   3            val_2   = atoi(minutes);
 341   3            val_3   = atoi(seconds);
 342   3            
 343   3            if((val_1 == 0) && (val_2 == 0) && (val_3 == 0))
 344   3            {
 345   4              timer_en_flag = LOW;
 346   4              timer_flag = FLOATNG;
 347   4              
 348   4              Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 349   4              Write_DATAFLASH_BYTE(DS1307_TIMER_EN_FLAG, timer_en_flag);
 350   4              
 351   4              check_btn_last_state();
 352   4              
 353   4              printf("DISABLE\r\n");
 354   4            }
 355   3            else if((val_1 == 11) && (val_2 == 11) && (val_3 == 11))
 356   3            {
 357   4              timer_en_flag = HIGH;
 358   4              timer_flag = LOW;
 359   4              
 360   4              Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 361   4              Write_DATAFLASH_BYTE(DS1307_TIMER_EN_FLAG, timer_en_flag);
 362   4              
 363   4              // check -> out of range A-B -> relay 1 and relay 2 off
 364   4              if(TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) < TIME2SECOND(t_hour_end, t_minute_end, t
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 7   

             -_second_end))
 365   4              {
 366   5                LED_RELAY1 = LOW;
 367   5                LED_RELAY2 = LOW;
 368   5                
 369   5                Write_DATAFLASH_BYTE(STATE_MODE, NORMAL);
 370   5                state = NORMAL;
 371   5              }
 372   4              
 373   4              if(TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) > TIME2SECOND(t_hour_end, t_minute_end, t
             -_second_end))
 374   4              {
 375   5                LED_RELAY1 = LOW;
 376   5                LED_RELAY2 = LOW;
 377   5                
 378   5                Write_DATAFLASH_BYTE(STATE_MODE, NORMAL);
 379   5                state = NORMAL;
 380   5              }
 381   4              
 382   4              printf("ENABLE\r\n");
 383   4            }
 384   3          }
 385   2          else
 386   2          {
 387   3            // do something here
 388   3          }
 389   2          
 390   2          // clear buffer
 391   2          index_data = 0;
 392   2          memset(payLoad, 0, PAYLOAD_LEN);
 393   2        }
 394   1      }
 395          
 396          void parser_data(char *header, char *hours, char *minutes, char *seconds, char *payLoad)
 397          {
 398   1        char *p_rx, *p_header, *p_hours, *p_minutes, *p_seconds;
 399   1        
 400   1        // parser data => $C,23,17,05# - Set current time || $S,23,17,05# - Alarm on || $E,23,17,05# - Alarm off
 401   1        if((header != NULL) && (hours != NULL) && (minutes != NULL) && (seconds != NULL) && (payLoad != NULL))
 402   1        {
 403   2          p_rx = payLoad;
 404   2          p_header = p_rx;
 405   2          p_rx = strchr(p_header, ',');
 406   2          if(p_rx != NULL)
 407   2          {
 408   3            *p_rx = 0;
 409   3            strcpy(header, p_header);
 410   3          }   
 411   2          
 412   2          p_hours = p_rx+1;
 413   2          p_rx = strchr(p_hours, ',');
 414   2          if(p_rx != NULL)
 415   2          {
 416   3              *p_rx = 0;
 417   3              strcpy(hours, p_hours);
 418   3          }
 419   2          
 420   2          p_minutes = p_rx+1;
 421   2          p_rx = strchr(p_minutes, ',');
 422   2          if(p_rx != NULL)
 423   2          {
 424   3              *p_rx = 0;
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 8   

 425   3              strcpy(minutes, p_minutes);
 426   3          }
 427   2          
 428   2          p_seconds = p_rx+1;
 429   2          p_rx = strchr(p_seconds, '#');
 430   2          if(p_rx != NULL)
 431   2          {
 432   3              *p_rx = 0;
 433   3              strcpy(seconds, p_seconds);
 434   3          }
 435   2        }
 436   1      }
 437          
 438          void check_ds1307(void)
 439          {
 440   1        if(request_ds1307_interval == HIGH) // ds1307 get interval data
 441   1        {
 442   2          if (timer_en_flag == HIGH) // if timer is ENABLE
 443   2          {
 444   3            // get current time
 445   3            DS1307_Get_Current_Time(&rtc_time);
 446   3      
 447   3            // get current date
 448   3            //DS1307_Get_Current_Date(&rtc_date);
 449   3      
 450   3            if(timer_flag == LOW) // Phase 1 during A - B
 451   3            {
 452   4              if(TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) == TIME2SECOND(t_hour_end, t_minute_end, 
             -t_second_end))
 453   4              {
 454   5                printf("SET TIMER ERROR\r\n");
 455   5              }
 456   4              
 457   4              // relay 1 on and relay 2 off => 6.am - 17.pm
 458   4              if(TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) < TIME2SECOND(t_hour_end, t_minute_end, t
             -_second_end))
 459   4              {
 460   5      #if LOG_DEBUG
 461   5                printf("1\r\n");
 462   5      #endif
 463   5                if((TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) > TIME2SECOND(t_hour_begin, t_min
             -ute_begin, t_second_begin)) &&
 464   5                   (TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) < TIME2SECOND(t_hour_end, t_minute
             -_end, t_second_end)))
 465   5                {   
 466   6                  LED_RELAY1 = HIGH;
 467   6                  LED_RELAY2 = LOW;
 468   6                  
 469   6                  timer_flag = HIGH;
 470   6                  timer_mode_flag = LINE_TIME;
 471   6                  
 472   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 473   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 474   6                  
 475   6                  if(state == PASS_HOLD_3S)
 476   6                  {
 477   7                    Write_DATAFLASH_BYTE(STATE_MODE, NORMAL);
 478   7                    state = NORMAL;
 479   7                  }
 480   6                  
 481   6      #if LOG_DEBUG
 482   6                  printf("Jump into active mode 1\r\n");
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 9   

 483   6      #endif
 484   6                }
 485   5              }
 486   4              
 487   4              // relay 1 on and relay 2 off => 19.pm - 6.am
 488   4              if(TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) > TIME2SECOND(t_hour_end, t_minute_end, t
             -_second_end))
 489   4              {
 490   5      #if LOG_DEBUG
 491   5                printf("2\r\n");
 492   5      #endif
 493   5                if(TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) > TIME2SECOND(t_hour_begin, t_minu
             -te_begin, t_second_begin))
 494   5                {
 495   6                  LED_RELAY1 = HIGH;
 496   6                  LED_RELAY2 = LOW;
 497   6      
 498   6                  timer_flag = HIGH;
 499   6                  timer_mode_flag = WRAP_TIME;
 500   6      
 501   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 502   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 503   6      
 504   6                  if(state == PASS_HOLD_3S)
 505   6                  {
 506   7                    Write_DATAFLASH_BYTE(STATE_MODE, NORMAL);
 507   7                    state = NORMAL;
 508   7                  }
 509   6                  
 510   6      #if LOG_DEBUG
 511   6                  printf("Jump into active mode 2\r\n");
 512   6      #endif
 513   6                }
 514   5              }
 515   4            }
 516   3            
 517   3            if(timer_flag == HIGH) // Phase 2 during A - B
 518   3            {
 519   4              // relay 1 and relay 2 off => 6.am - 17.pm
 520   4              if((TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) < TIME2SECOND(t_hour_end, t_minute_end, 
             -t_second_end)) &&
 521   4                 (timer_mode_flag == LINE_TIME))
 522   4              {
 523   5      #if LOG_DEBUG
 524   5                printf("12\r\n");
 525   5      #endif
 526   5                if(TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) < TIME2SECOND(t_hour_begin, t_min
             -ute_begin, t_second_begin))
 527   5                {
 528   6                  LED_RELAY1 = LOW;
 529   6                  LED_RELAY2 = LOW;
 530   6                  
 531   6                  timer_flag = LOW;
 532   6                  timer_mode_flag = FLOATNG;
 533   6                  
 534   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 535   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 536   6                  
 537   6                  if(state == PASS_HOLD_3S)
 538   6                  {
 539   7                    Write_DATAFLASH_BYTE(STATE_MODE, NORMAL);
 540   7                    state = NORMAL;
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 10  

 541   7                  }
 542   6                  
 543   6      #if LOG_DEBUG           
 544   6                  printf("Jump out active mode 1 < \r\n");
 545   6      #endif
 546   6                }
 547   5      
 548   5                if(TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) > TIME2SECOND(t_hour_end, t_minute
             -_end, t_second_end))
 549   5                {
 550   6                  LED_RELAY1 = LOW;
 551   6                  LED_RELAY2 = LOW;
 552   6                  
 553   6                  timer_flag = LOW;
 554   6                  timer_mode_flag = FLOATNG;
 555   6      
 556   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 557   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 558   6                  
 559   6                  if(state == PASS_HOLD_3S)
 560   6                  {
 561   7                    Write_DATAFLASH_BYTE(STATE_MODE, NORMAL);
 562   7                    state = NORMAL;
 563   7                  }
 564   6                  
 565   6      #if LOG_DEBUG           
 566   6                  printf("Jump out active mode 1 > \r\n");
 567   6      #endif
 568   6                }
 569   5              }
 570   4              
 571   4              // relay 1 and relay 2 off => 19.pm - 6.am
 572   4              if((TIME2SECOND(t_hour_begin, t_minute_begin, t_second_begin) > TIME2SECOND(t_hour_end, t_minute_end, 
             -t_second_end)) &&
 573   4                 (timer_mode_flag == WRAP_TIME))
 574   4              {
 575   5      #if LOG_DEBUG 
 576   5                printf("21\r\n"); 
 577   5      #endif
 578   5                if((TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) < TIME2SECOND(t_hour_begin, t_min
             -ute_begin, t_second_begin)) && // 6.am -> 19.pm
 579   5                   (TIME2SECOND(rtc_time.hours, rtc_time.minutes, rtc_time.seconds) > TIME2SECOND(t_hour_end, t_minute
             -_end, t_second_end)))
 580   5                {
 581   6                  LED_RELAY1 = LOW;
 582   6                  LED_RELAY2 = LOW;
 583   6                  
 584   6                  timer_flag = LOW;
 585   6                  timer_mode_flag = FLOATNG;
 586   6                  
 587   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_FLAG, timer_flag);
 588   6                  Write_DATAFLASH_BYTE(DS1307_TIMER_MODE_FLAG, timer_mode_flag);
 589   6                  
 590   6                  if(state == PASS_HOLD_3S)
 591   6                  {
 592   7                    Write_DATAFLASH_BYTE(STATE_MODE, NORMAL);
 593   7                    state = NORMAL;
 594   7                  }
 595   6                  
 596   6      #if LOG_DEBUG             
 597   6                  printf("Jump out active mode 2\r\n");
 598   6      #endif
C51 COMPILER V9.60.0.0   APP                                                               03/20/2023 23:34:46 PAGE 11  

 599   6                }         
 600   5              }
 601   4            }
 602   3          }
 603   2          
 604   2          request_ds1307_interval = LOW;
 605   2        }
 606   1      }
 607          
 608          /*********************************************************************************************************
             -***
 609               Timer1 interrupt subroutine
 610          **********************************************************************************************************
             -**/
 611          void Timer1_ISR (void) interrupt 3
 612          {
 613   1        _push_(SFRS);
 614   1      
 615   1        tick++;
 616   1        if (tick >= 1000) // for 1s
 617   1        {
 618   2          request_ds1307_interval = HIGH;
 619   2          tick = 0;
 620   2        }
 621   1        
 622   1        TH1 = TH1_INIT;
 623   1        TL1 = TL1_INIT;
 624   1        TF0 = 0;
 625   1        
 626   1        _pop_(SFRS);
 627   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4791    ----
   CONSTANT SIZE    =    230    ----
   XDATA SIZE       =     33      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      38
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
