C51 COMPILER V9.60.0.0   EEPROM                                                            03/19/2023 19:35:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\eeprom.c OPTIMIZE(7,SPEED) BROWSE INCDIR(.\inc;.\Library\Device\Incl
                    -ude;.\Library\StdDriver\inc;..\Project) DEBUG OBJECTEXTEND PRINT(.\Listings\eeprom.lst) TABS(2) OBJECT(.\Objects\eeprom.
                    -obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2020 nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //********************************************************************************************************
             -***
  11          #include "MS51_16K.H"
  12          
  13          
  14          volatile unsigned char xdata page_buffer[128];
  15          /**
  16           * @brief       Write Dataflash as EEPROM, 
  17           * @param       u16EPAddr the 16bit EEPROM start address. Any of APROM address can be defined as start add
             -ress (0x3800)
  18           * @param       u8EPData the 8bit value need storage in (0x3800)
  19           * @return      none
  20           * @details     Storage dataflash page data into XRAM 380H-400H, modify data in XRAM, Erase dataflash page
             -, writer updated XRAM data into dataflash
  21           */
  22          void Write_DATAFLASH_BYTE(unsigned int u16EPAddr,unsigned char u8EPData)
  23          {
  24   1        unsigned char looptmp=0;
  25   1        unsigned int u16_addrl_r;
  26   1        unsigned int RAMtmp;
  27   1        
  28   1      //Check page start address
  29   1        u16_addrl_r=(u16EPAddr/128)*128;
  30   1      //Save APROM data to XRAM0
  31   1        for(looptmp=0;looptmp<0x80;looptmp++)
  32   1        {
  33   2          RAMtmp = Read_APROM_BYTE((unsigned int code *)(u16_addrl_r+looptmp));
  34   2          page_buffer[looptmp]=RAMtmp;
  35   2        }
  36   1      // Modify customer data in XRAM
  37   1        page_buffer[u16EPAddr&0x7f] = u8EPData;
  38   1        
  39   1      //Erase APROM DATAFLASH page
  40   1          IAPAL = u16_addrl_r&0xff;
  41   1          IAPAH = (u16_addrl_r>>8)&0xff;
  42   1          IAPFD = 0xFF;
  43   1          set_CHPCON_IAPEN; 
  44   1          set_IAPUEN_APUEN;
C51 COMPILER V9.60.0.0   EEPROM                                                            03/19/2023 19:35:19 PAGE 2   

  45   1          IAPCN = 0x22;     
  46   1           set_IAPTRG_IAPGO; 
  47   1          
  48   1      //Save changed RAM data to APROM DATAFLASH
  49   1          set_CHPCON_IAPEN; 
  50   1          set_IAPUEN_APUEN;
  51   1          IAPCN = 0x21;
  52   1          for(looptmp=0;looptmp<0x80;looptmp++)
  53   1          {
  54   2            IAPAL = (u16_addrl_r&0xff)+looptmp;
  55   2            IAPAH = (u16_addrl_r>>8)&0xff;
  56   2            IAPFD = page_buffer[looptmp];
  57   2            set_IAPTRG_IAPGO;      
  58   2          }
  59   1          clr_IAPUEN_APUEN;
  60   1          clr_CHPCON_IAPEN;
  61   1      }  
  62          
  63          /**
  64           * @brief       Read Dataflash
  65           * @param       Dataflash start address
  66           * @return      Dataflash Value
  67           * @details     None
  68           */
  69          unsigned char Read_APROM_BYTE(unsigned int code *u16_addr)
  70          {
  71   1          unsigned char rdata;
  72   1          rdata = *u16_addr >> 8;
  73   1          return rdata;
  74   1      }
  75          
  76          //-------------------------------------------------------------------------
  77          void Write_DATAFLASH_ARRAY(unsigned int u16_addr,unsigned char *pDat,unsigned int num)
  78          {
  79   1        unsigned char CPageAddr,EPageAddr,cnt;
  80   1        CPageAddr=u16_addr>>7;
  81   1        EPageAddr=(u16_addr+num)>>7;
  82   1        while(CPageAddr!=EPageAddr)
  83   1        {
  84   2          cnt=WriteDataToOnePage(u16_addr,pDat,128);
  85   2          u16_addr+=cnt;
  86   2          pDat+=cnt;
  87   2          num-=cnt;
  88   2          CPageAddr=u16_addr>>7;
  89   2        }
  90   1        if(num)
  91   1        {
  92   2          WriteDataToOnePage(u16_addr,pDat,num);
  93   2        }
  94   1      }
  95          //-------------------------------------------------------------------------
  96          void Read_DATAFLASH_ARRAY(unsigned int u16_addr,unsigned char *pDat,unsigned int num)
  97          {
  98   1        unsigned int i;
  99   1        for(i=0;i<num;i++)
 100   1          pDat[i] = *(unsigned char code *)(u16_addr+i);
 101   1      }
 102          
 103          //--------------------------------------------------------------------------------------------------------
             ----
 104          unsigned char WriteDataToOnePage(unsigned int u16_addr,const unsigned char *pDat,unsigned char num)
 105          {
C51 COMPILER V9.60.0.0   EEPROM                                                            03/19/2023 19:35:19 PAGE 3   

 106   1        unsigned char i,offset;
 107   1        unsigned char code *pCode;
 108   1        unsigned char xdata xd_tmp[128];
 109   1      
 110   1        set_CHPCON_IAPEN; 
 111   1        set_IAPUEN_APUEN;
 112   1      
 113   1        offset=u16_addr&0x007F;
 114   1        i = PAGE_SIZE - offset;
 115   1        if(num>i)num=i;
 116   1        pCode = (unsigned char code *)u16_addr;
 117   1        for(i=0;i<num;i++)
 118   1        {
 119   2          if(pCode[i]!=0xFF)break;
 120   2        }
 121   1        if(i==num)
 122   1        {
 123   2          IAPCN =BYTE_PROGRAM_APROM;
 124   2          IAPAL = u16_addr;
 125   2          IAPAH = u16_addr>>8;
 126   2          for(i=0;i<num;i++)
 127   2          {
 128   3            IAPFD = pDat[i];
 129   3            set_IAPTRG_IAPGO;
 130   3            IAPAL++;
 131   3          }
 132   2          for(i=0;i<num;i++)
 133   2          {
 134   3            if(pCode[i]!=pDat[i])break;
 135   3          }
 136   2          if(i!=num) goto WriteDataToPage20;
 137   2        }
 138   1        else
 139   1        {
 140   2          WriteDataToPage20:
 141   2          pCode = (unsigned char code *)(u16_addr&0xff80);
 142   2          for(i=0;i<128;i++)
 143   2          {
 144   3            xd_tmp[i] = pCode[i];
 145   3          }
 146   2          for(i=0;i<num;i++)
 147   2          {
 148   3            xd_tmp[offset+i] = pDat[i];
 149   3          }
 150   2          do
 151   2          {
 152   3            IAPAL = (u16_addr&0xff80);
 153   3            IAPAH = u16_addr>>8;
 154   3            IAPCN = PAGE_ERASE_APROM;
 155   3            IAPFD = 0xFF;  
 156   3            set_IAPTRG_IAPGO; 
 157   3            IAPCN =BYTE_PROGRAM_APROM;
 158   3            for(i=0;i<128;i++)
 159   3            {
 160   4              IAPFD = xd_tmp[i];
 161   4              set_IAPTRG_IAPGO;
 162   4              IAPAL++;
 163   4            }
 164   3            for(i=0;i<128;i++)
 165   3            {
 166   4              if(pCode[i]!=xd_tmp[i])break;
 167   4            }
C51 COMPILER V9.60.0.0   EEPROM                                                            03/19/2023 19:35:19 PAGE 4   

 168   3          }while(i!=128);
 169   2          
 170   2        }
 171   1        clr_CHPCON_IAPEN;
 172   1        
 173   1        return num;
 174   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1009    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128     128
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      29
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
